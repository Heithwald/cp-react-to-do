{"version":3,"sources":["components/CreateTask.js","components/TaskFilters.js","components/Task.js","components/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTask","tasks","handleSubmit","handleChange","title","inputRef","useRef","useEffect","current","focus","length","className","onSubmit","type","ref","onChange","value","TaskFilters","filterTasks","resetFilters","map","index","onClick","Task","task","updateTask","updateTaskStatus","deleteTask","event","target","status","TaskList","filterType","filteredTasks","filter","originalIndex","App","useState","setTitle","setTasks","setFilterType","addTask","currentTasks","preventDefault","statusType","currentValue","newTasks","window","confirm","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c057749f.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nexport const CreateTask = ({ tasks, handleSubmit, handleChange, title }) => {\r\n  const inputRef = useRef();\r\n  useEffect(() => inputRef.current.focus(), [tasks.length]); // Устанавливаем focus на поле ввода, после добавления/удаления task\r\n\r\n  return (\r\n    <form\r\n      className=\"create-task\"\r\n      onSubmit={handleSubmit} // Вызываем создание нового task с task.title равным значению input\r\n    >\r\n      <input\r\n        className=\"create-task__task-title\"\r\n        type=\"text\"\r\n        ref={inputRef}\r\n        onChange={handleChange} // Устанавливаем значение ввода в title\r\n        value={title} // Подхватываем title; так это поле можно, например, очищать после создания нового task\r\n      />\r\n      <button className=\"create-task__create-button\" type=\"submit\">\r\n        Create\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const TaskFilters = ({ filterTasks, resetFilters }) => {\r\n  const statusTypes = [\"Active\", \"New\", \"WIP\", \"Done\"]; // Массив вариантов task.status\r\n\r\n  return (\r\n    <fieldset className=\"filters\">\r\n      <legend>Filters</legend>\r\n      {statusTypes.map((type, index) => (\r\n        <button\r\n          key={index}\r\n          className=\"filters__filter-button\"\r\n          onClick={() => {\r\n            filterTasks(type); // Передаём type в filterType, что триггерит фильтрацию массива tasks по task.type === type\r\n          }}\r\n        >\r\n          {type}\r\n        </button>\r\n      ))}\r\n      <button\r\n        className=\"filters__filter-button\"\r\n        onClick={resetFilters} // Сбрасываем filterType на null\r\n      >\r\n        Reset\r\n      </button>\r\n    </fieldset>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Task = ({\r\n  index,\r\n  task,\r\n  updateTask,\r\n  updateTaskStatus,\r\n  deleteTask,\r\n}) => {\r\n  const statusTypes = [\"New\", \"Active\", \"WIP\", \"Done\"]; // Массив вариантов task.status\r\n\r\n  return (\r\n    <div className=\"task-list__task\">\r\n      <input\r\n        className=\"task-title\"\r\n        type=\"text\"\r\n        value={task.title}\r\n        onChange={(event) => updateTask(index, event.target.value)} // Обновляем значение task.title при вводе\r\n      />\r\n      <select\r\n        className=\"task-status\"\r\n        value={task.status}\r\n        onChange={(event) => updateTaskStatus(index, event.target.value)} // Обновляем значение task.status при вводе\r\n      >\r\n        {statusTypes.map((type, index) => (\r\n          <option key={index}>{type}</option>\r\n        ))}\r\n      </select>\r\n      <button\r\n        className=\"task-delete-button\"\r\n        onClick={() => deleteTask(index)} // Удаляем task по пропу index\r\n      >\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Task } from \"./Task\";\r\n\r\nexport const TaskList = ({\r\n  tasks,\r\n  filterType,\r\n  updateTaskStatus,\r\n  updateTask,\r\n  deleteTask,\r\n}) => {\r\n  // Если фильтр не был нажат и filterType равен null, маппим оригинальный массив tasks\r\n  if (!filterType) {\r\n    return (\r\n      <div className=\"task-list\">\r\n        {tasks.map((task, index) => (\r\n          <Task\r\n            key={index}\r\n            index={index}\r\n            task={task}\r\n            updateTaskStatus={updateTaskStatus}\r\n            updateTask={updateTask}\r\n            deleteTask={deleteTask}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    // Если фильтр был нажат и установлен filterType, фильтруем оригинальный массив tasks по filterType и маппим уже отфильтрованный массив filteredTasks\r\n    let filteredTasks = tasks.filter((task) => task.status === filterType);\r\n    return (\r\n      <div className=\"task-list\">\r\n        {filteredTasks.map((task) => (\r\n          <Task\r\n            key={task.originalIndex}\r\n            index={task.originalIndex} // передаём originalIndex, чтобы значения массивов tasks и filteredTasks матчились 1-к-1\r\n            task={task}\r\n            updateTaskStatus={updateTaskStatus}\r\n            updateTask={updateTask}\r\n            deleteTask={deleteTask}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\nimport { CreateTask } from \"./components/CreateTask\";\nimport { TaskFilters } from \"./components/TaskFilters\";\nimport { TaskList } from \"./components/TaskList\";\n\nconst App = () => {\n  const [title, setTitle] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const [filterType, setFilterType] = useState(null);\n\n  /// Обработчик клика кнопки. Вызывает функцию cоздания task при наличии значения в строке ///\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (title) {\n      addTask(title);\n      setTitle(\"\");\n    }\n    return null;\n  };\n\n  /// Функция сохранения значения строки ввода, передаёт значение в state ///\n  const handleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  /// Функция создания task ///\n  const addTask = (title) => {\n    setTasks((currentTasks) => [\n      ...currentTasks,\n      { title, status: \"New\", originalIndex: currentTasks.length }, // originalIndex требуется для обновления массива при внесении изменений в отфильтрованные task\n    ]);\n  };\n\n  /// Функция редактирования task ///\n  const updateTask = (index, currentValue) => {\n    let newTasks = [...tasks];\n    newTasks[index].title = currentValue;\n    setTasks(newTasks);\n  };\n\n  /// Функция редактирования task.status ///\n  const updateTaskStatus = (index, currentValue) => {\n    let newTasks = [...tasks];\n    newTasks[index].status = currentValue;\n    setTasks(newTasks);\n  };\n\n  /// Функция удаления task ///\n  const deleteTask = (index) => {\n    if (window.confirm(\"Do you really want to delete this task?\")) {\n      let newTasks = [...tasks];\n      newTasks.splice(index, 1);\n      setTasks(newTasks);\n    }\n  };\n\n  /// Функция фильтрации по статусам ///\n  const filterTasks = (statusType) => {\n    setFilterType(statusType);\n  };\n\n  const resetFilters = () => {\n    setFilterType(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <CreateTask\n        tasks={tasks}\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        title={title}\n      />\n      <TaskFilters filterTasks={filterTasks} resetFilters={resetFilters} />\n      <TaskList\n        tasks={tasks}\n        filterType={filterType}\n        resetFilters={resetFilters}\n        updateTask={updateTask}\n        updateTaskStatus={updateTaskStatus}\n        deleteTask={deleteTask}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}